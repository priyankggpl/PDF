# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s6kpJ9q50e0h1mEu_KHBCp9ZBOynHlVr
"""

!pip install --upgrade byaldi

!sudo apt-get install -y poppler-utils

from byaldi import RAGMultiModalModel

from google.colab import files
uploaded = files.upload()  # You can upload the PDF file here

# Step 2: Read and extract text from the uploaded PDF
pdf_filename = list(uploaded.keys())[0]

!pip install -q pdf2image qwen-vl-utils flash-attn





from huggingface_hub import notebook_login

notebook_login()

from huggingface_hub import login

# Replace 'your_token_here' with your actual Hugging Face token
login(token="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")

import os
print(os.path.exists(os.path.expanduser("~/.huggingface/token")))

from huggingface_hub import whoami
print(whoami())

pdf_filename

import torch
print(torch.__version__)
print(torch.cuda.is_available())

!pip install --upgrade transformers

model = RAGMultiModalModel.from_pretrained("vidore/colpali-v1.3")

model.index(
    input_path=pdf_filename,
    index_name="your_index_name",
    store_collection_with_index=False,
    overwrite=True
)

query = "what is the location of the tender"
results = model.search(query, k=5)
for result in results:
    print(f"Doc ID: {result.doc_id}, Page: {result.page_num}, Score: {result.score}\n")

query = "Elgibilty Critera"
results = model.search(query, k=10)
for result in results:
    print(f"Doc ID: {result.doc_id}, Page: {result.page_num}, Score: {result.score}\n")

from google.colab import files
uploaded = files.upload()  # You can upload the PDF file here

# Step 2: Read and extract text from the uploaded PDF
pdf_filename = list(uploaded.keys())[0]

from byaldi import RAGMultiModalModel

RAG = RAGMultiModalModel.from_pretrained("vidore/colpali")


RAG.index(
    input_path=pdf_filename,
    index_name="image_index", # index will be saved at index_root/index_name/
    store_collection_with_index=False,
    overwrite=True
)

text_query = "What is the name of the client?"
results = RAG.search(text_query, k=10)
results

from transformers import Qwen2VLForConditionalGeneration, AutoTokenizer, AutoProcessor
from qwen_vl_utils import process_vision_info
import torch

model = Qwen2VLForConditionalGeneration.from_pretrained("Qwen/Qwen2-VL-2B-Instruct",
                                                        trust_remote_code=True, torch_dtype=torch.bfloat16).cuda().eval()

from pdf2image import convert_from_path

images = convert_from_path(pdf_filename)
images[5]

processor = AutoProcessor.from_pretrained("Qwen/Qwen2-VL-2B-Instruct", trust_remote_code=True)

image_index = results[0]["page_num"] - 1
messages = [
    {
        "role": "user",
        "content": [
            {
                "type": "image",
                "image": images[image_index],
            },
            {"type": "text", "text": text_query},
        ],
    }
]

text = processor.apply_chat_template(
    messages, tokenize=False, add_generation_prompt=True
)

image_inputs, video_inputs = process_vision_info(messages)
inputs = processor(
    text=[text],
    images=image_inputs,
    videos=video_inputs,
    padding=True,
    return_tensors="pt",
)
inputs = inputs.to("cuda")

generated_ids = model.generate(**inputs, max_new_tokens=150)
generated_ids_trimmed = [
    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)
]
output_text = processor.batch_decode(
    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False
)